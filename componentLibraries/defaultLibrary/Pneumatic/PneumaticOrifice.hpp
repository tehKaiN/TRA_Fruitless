/*-----------------------------------------------------------------------------
 This source file is a part of Hopsan

 Copyright (c) 2009 to present year, Hopsan Group

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

 For license details and information about the Hopsan Group see the files
 GPLv3 and HOPSANGROUP in the Hopsan source code root directory

 For author and contributor information see the AUTHORS file
-----------------------------------------------------------------------------*/

#ifndef PNEUMATICORIFICE_HPP_INCLUDED
#define PNEUMATICORIFICE_HPP_INCLUDED

#include <iostream>
#include "ComponentEssentials.h"
#include "ComponentUtilities.h"
#include "math.h"

//!
//! @file PneumaticOrifice.hpp
//! @author Petter Krus <petter.krus@liu.se>
//! @date Fri 5 Dec 2014 18:19:36
//! @brief Pneumatic orifice
//! @ingroup PneumaticComponents
//!
//==This code has been autogenerated using Compgen==
//from 
/*{, C:, HopsanTrunk, componentLibraries, defaultLibrary, \
Pneumatic}/PneumaticOrifice1.nb*/

using namespace hopsan;

class PneumaticOrifice : public ComponentQ
{
private:
     double Cd;
     double R;
     double cv;
     double eps;
     Port *mpPp1;
     Port *mpPp2;
     double delayParts1[9];
     double delayParts2[9];
     double delayParts3[9];
     double delayParts4[9];
     double delayParts5[9];
     double delayParts6[9];
     double delayParts7[9];
     Matrix jacobianMatrix;
     Vec systemEquations;
     Matrix delayedPart;
     int i;
     int iter;
     int mNoiter;
     double jsyseqnweight[4];
     int order[7];
     int mNstep;
     //Port Pp1 variable
     double pp1;
     double qmp1;
     double Tp1;
     double dEp1;
     double cp1;
     double Zcp1;
     //Port Pp2 variable
     double pp2;
     double qmp2;
     double Tp2;
     double dEp2;
     double cp2;
     double Zcp2;
//==This code has been autogenerated using Compgen==
     //inputVariables
     double A0;
     //outputVariables
     double qma;
     double qmb;
     //LocalExpressions variables
     double kappa;
     double Kg;
     double Ndenom;
     double crit;
     double cp;
     //Expressions variables
     //Port Pp1 pointer
     double *mpND_pp1;
     double *mpND_qmp1;
     double *mpND_Tp1;
     double *mpND_dEp1;
     double *mpND_cp1;
     double *mpND_Zcp1;
     //Port Pp2 pointer
     double *mpND_pp2;
     double *mpND_qmp2;
     double *mpND_Tp2;
     double *mpND_dEp2;
     double *mpND_cp2;
     double *mpND_Zcp2;
     //Delay declarations
//==This code has been autogenerated using Compgen==
     //inputVariables pointers
     double *mpA0;
     //inputParameters pointers
     double *mpCd;
     double *mpR;
     double *mpcv;
     double *mpeps;
     //outputVariables pointers
     double *mpqma;
     double *mpqmb;
     Delay mDelayedPart10;
     Delay mDelayedPart20;
     Delay mDelayedPart30;
     Delay mDelayedPart40;
     Delay mDelayedPart50;
     EquationSystemSolver *mpSolver;

public:
     static Component *Creator()
     {
        return new PneumaticOrifice();
     }

     void configure()
     {
//==This code has been autogenerated using Compgen==

        mNstep=9;
        jacobianMatrix.create(7,7);
        systemEquations.create(7);
        delayedPart.create(8,6);
        mNoiter=2;
        jsyseqnweight[0]=1;
        jsyseqnweight[1]=0.67;
        jsyseqnweight[2]=0.5;
        jsyseqnweight[3]=0.5;


        //Add ports to the component
        mpPp1=addPowerPort("Pp1","NodePneumatic");
        mpPp2=addPowerPort("Pp2","NodePneumatic");
        //Add inputVariables to the component
            addInputVariable("A0","Area","m2",1.e-6,&mpA0);

        //Add inputParammeters to the component
            addInputVariable("Cd", "Discharge coefficient", "", 0.65,&mpCd);
            addInputVariable("R", "Gas constant", "J/Kg K", 287.,&mpR);
            addInputVariable("cv", "heatcoeff", "J/Kg K", 718,&mpcv);
            addInputVariable("eps", "Linearisation coeff", "", 0.02,&mpeps);
        //Add outputVariables to the component
            addOutputVariable("qma","Internal variable","kg/s",0.,&mpqma);
            addOutputVariable("qmb","Internal variable","kg/s",0.,&mpqmb);

//==This code has been autogenerated using Compgen==
        //Add constantParameters
        mpSolver = new EquationSystemSolver(this,7);
     }

    void initialize()
     {
        //Read port variable pointers from nodes
        //Port Pp1
        mpND_pp1=getSafeNodeDataPtr(mpPp1, NodePneumatic::Pressure);
        mpND_qmp1=getSafeNodeDataPtr(mpPp1, NodePneumatic::MassFlow);
        mpND_Tp1=getSafeNodeDataPtr(mpPp1, NodePneumatic::Temperature);
        mpND_dEp1=getSafeNodeDataPtr(mpPp1, NodePneumatic::EnergyFlow);
        mpND_cp1=getSafeNodeDataPtr(mpPp1, NodePneumatic::WaveVariable);
        mpND_Zcp1=getSafeNodeDataPtr(mpPp1, NodePneumatic::CharImpedance);
        //Port Pp2
        mpND_pp2=getSafeNodeDataPtr(mpPp2, NodePneumatic::Pressure);
        mpND_qmp2=getSafeNodeDataPtr(mpPp2, NodePneumatic::MassFlow);
        mpND_Tp2=getSafeNodeDataPtr(mpPp2, NodePneumatic::Temperature);
        mpND_dEp2=getSafeNodeDataPtr(mpPp2, NodePneumatic::EnergyFlow);
        mpND_cp2=getSafeNodeDataPtr(mpPp2, NodePneumatic::WaveVariable);
        mpND_Zcp2=getSafeNodeDataPtr(mpPp2, NodePneumatic::CharImpedance);

        //Read variables from nodes
        //Port Pp1
        pp1 = (*mpND_pp1);
        qmp1 = (*mpND_qmp1);
        Tp1 = (*mpND_Tp1);
        dEp1 = (*mpND_dEp1);
        cp1 = (*mpND_cp1);
        Zcp1 = (*mpND_Zcp1);
        //Port Pp2
        pp2 = (*mpND_pp2);
        qmp2 = (*mpND_qmp2);
        Tp2 = (*mpND_Tp2);
        dEp2 = (*mpND_dEp2);
        cp2 = (*mpND_cp2);
        Zcp2 = (*mpND_Zcp2);

        //Read inputVariables from nodes
        A0 = (*mpA0);

        //Read inputParameters from nodes
        Cd = (*mpCd);
        R = (*mpR);
        cv = (*mpcv);
        eps = (*mpeps);

        //Read outputVariables from nodes
        qma = (*mpqma);
        qmb = (*mpqmb);

//==This code has been autogenerated using Compgen==

        //LocalExpressions
        kappa = 1 + R/cv;
        Kg = Sqrt((Power(2,(1 + kappa)/(-1 + kappa))*kappa*Power(1/(1 + \
kappa),(1 + kappa)/(-1 + kappa)))/R);
        Ndenom = Power(2,-1 + (1 + kappa)/(-1 + kappa))*(-1 + \
kappa)*Power(1/(1 + kappa),(1 + kappa)/(-1 + kappa));
        crit = Power(2,kappa/(-1 + kappa))*Power(1/(1 + kappa),kappa/(-1 + \
kappa));
        cp = cv + R;

        //Initialize delays

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];
        delayedPart[4][1] = delayParts4[1];
        delayedPart[5][1] = delayParts5[1];
        delayedPart[6][1] = delayParts6[1];
        delayedPart[7][1] = delayParts7[1];
     }
    void simulateOneTimestep()
     {
        Vec stateVar(7);
        Vec stateVark(7);
        Vec deltaStateVar(7);

        //Read variables from nodes
        //Port Pp1
        Tp1 = (*mpND_Tp1);
        cp1 = (*mpND_cp1);
        Zcp1 = (*mpND_Zcp1);
        //Port Pp2
        Tp2 = (*mpND_Tp2);
        cp2 = (*mpND_cp2);
        Zcp2 = (*mpND_Zcp2);

        //Read inputVariables from nodes
        A0 = (*mpA0);

        //LocalExpressions
        kappa = 1 + R/cv;
        Kg = Sqrt((Power(2,(1 + kappa)/(-1 + kappa))*kappa*Power(1/(1 + \
kappa),(1 + kappa)/(-1 + kappa)))/R);
        Ndenom = Power(2,-1 + (1 + kappa)/(-1 + kappa))*(-1 + \
kappa)*Power(1/(1 + kappa),(1 + kappa)/(-1 + kappa));
        crit = Power(2,kappa/(-1 + kappa))*Power(1/(1 + kappa),kappa/(-1 + \
kappa));
        cp = cv + R;

        //Initializing variable vector for Newton-Raphson
        stateVark[0] = qma;
        stateVark[1] = qmb;
        stateVark[2] = qmp2;
        stateVark[3] = dEp1;
        stateVark[4] = dEp2;
        stateVark[5] = pp1;
        stateVark[6] = pp2;

        //Iterative solution using Newton-Rapshson
        for(iter=1;iter<=mNoiter;iter++)
        {
         //Orifice
         //Differential-algebraic system of equation parts

          //Assemble differential-algebraic equations
          systemEquations[0] =qma - (A0*Cd*Kg*pp1*(onNegative(-crit + \
pp1/pp2)*onNegative(pp1 - pp2) + onNegative(-crit + pp2/pp1)*onPositive(pp1 - \
pp2) + onNegative(pp1 - pp2)*onPositive(-crit + \
pp1/pp2)*signedSquareL((-Power(pp1/pp2,1 + 1/kappa) + \
Power(pp1/pp2,2/kappa))/Ndenom,eps) + onPositive(pp1 - pp2)*onPositive(-crit \
+ pp2/pp1)*signedSquareL((-Power(pp2/pp1,1 + 1/kappa) + \
Power(pp2/pp1,2/kappa))/Ndenom,eps)))/Sqrt(Tp1);
          systemEquations[1] =qmb - (A0*Cd*Kg*pp2*(onNegative(-crit + \
pp1/pp2)*onNegative(pp1 - pp2) + onNegative(-crit + pp2/pp1)*onPositive(pp1 - \
pp2) + onNegative(pp1 - pp2)*onPositive(-crit + \
pp1/pp2)*signedSquareL((-Power(pp1/pp2,1 + 1/kappa) + \
Power(pp1/pp2,2/kappa))/Ndenom,eps) + onPositive(pp1 - pp2)*onPositive(-crit \
+ pp2/pp1)*signedSquareL((-Power(pp2/pp1,1 + 1/kappa) + \
Power(pp2/pp1,2/kappa))/Ndenom,eps)))/Sqrt(Tp2);
          systemEquations[2] =qmp2 + qmb*onNegative(pp1 - pp2) - \
qma*onPositive(pp1 - pp2);
          systemEquations[3] =dEp1 + cp*qmp2*(Tp1*onNegative(-qmp2) + \
Tp2*onPositive(-qmp2));
          systemEquations[4] =dEp2 - cp*qmp2*(Tp2*onNegative(qmp2) + \
Tp1*onPositive(qmp2));
          systemEquations[5] =-cp1 + pp1 - dEp1*Zcp1;
          systemEquations[6] =-cp2 + pp2 - dEp2*Zcp2;

          //Jacobian matrix
          jacobianMatrix[0][0] = 1;
          jacobianMatrix[0][1] = 0;
          jacobianMatrix[0][2] = 0;
          jacobianMatrix[0][3] = 0;
          jacobianMatrix[0][4] = 0;
          jacobianMatrix[0][5] = -((A0*Cd*Kg*pp1*((((2*Power(pp1/pp2,-1 + \
2/kappa))/(kappa*pp2) - ((1 + \
1/kappa)*Power(pp1/pp2,1/kappa))/pp2)*dxSignedSquareL((-Power(pp1/pp2,1 + \
1/kappa) + Power(pp1/pp2,2/kappa))/Ndenom,eps)*onNegative(pp1 - \
pp2)*onPositive(-crit + pp1/pp2))/Ndenom + (((-2*pp2*Power(pp2/pp1,-1 + \
2/kappa))/(kappa*Power(pp1,2)) + ((1 + \
1/kappa)*pp2*Power(pp2/pp1,1/kappa))/Power(pp1,2))*dxSignedSquareL((-Power(pp\
2/pp1,1 + 1/kappa) + Power(pp2/pp1,2/kappa))/Ndenom,eps)*onPositive(pp1 - \
pp2)*onPositive(-crit + pp2/pp1))/Ndenom))/Sqrt(Tp1)) - \
(A0*Cd*Kg*(onNegative(-crit + pp1/pp2)*onNegative(pp1 - pp2) + \
onNegative(-crit + pp2/pp1)*onPositive(pp1 - pp2) + onNegative(pp1 - \
pp2)*onPositive(-crit + pp1/pp2)*signedSquareL((-Power(pp1/pp2,1 + 1/kappa) + \
Power(pp1/pp2,2/kappa))/Ndenom,eps) + onPositive(pp1 - pp2)*onPositive(-crit \
+ pp2/pp1)*signedSquareL((-Power(pp2/pp1,1 + 1/kappa) + \
Power(pp2/pp1,2/kappa))/Ndenom,eps)))/Sqrt(Tp1);
          jacobianMatrix[0][6] = -((A0*Cd*Kg*pp1*((((-2*pp1*Power(pp1/pp2,-1 \
+ 2/kappa))/(kappa*Power(pp2,2)) + ((1 + \
1/kappa)*pp1*Power(pp1/pp2,1/kappa))/Power(pp2,2))*dxSignedSquareL((-Power(pp\
1/pp2,1 + 1/kappa) + Power(pp1/pp2,2/kappa))/Ndenom,eps)*onNegative(pp1 - \
pp2)*onPositive(-crit + pp1/pp2))/Ndenom + (((2*Power(pp2/pp1,-1 + \
2/kappa))/(kappa*pp1) - ((1 + \
1/kappa)*Power(pp2/pp1,1/kappa))/pp1)*dxSignedSquareL((-Power(pp2/pp1,1 + \
1/kappa) + Power(pp2/pp1,2/kappa))/Ndenom,eps)*onPositive(pp1 - \
pp2)*onPositive(-crit + pp2/pp1))/Ndenom))/Sqrt(Tp1));
          jacobianMatrix[1][0] = 0;
          jacobianMatrix[1][1] = 1;
          jacobianMatrix[1][2] = 0;
          jacobianMatrix[1][3] = 0;
          jacobianMatrix[1][4] = 0;
          jacobianMatrix[1][5] = -((A0*Cd*Kg*pp2*((((2*Power(pp1/pp2,-1 + \
2/kappa))/(kappa*pp2) - ((1 + \
1/kappa)*Power(pp1/pp2,1/kappa))/pp2)*dxSignedSquareL((-Power(pp1/pp2,1 + \
1/kappa) + Power(pp1/pp2,2/kappa))/Ndenom,eps)*onNegative(pp1 - \
pp2)*onPositive(-crit + pp1/pp2))/Ndenom + (((-2*pp2*Power(pp2/pp1,-1 + \
2/kappa))/(kappa*Power(pp1,2)) + ((1 + \
1/kappa)*pp2*Power(pp2/pp1,1/kappa))/Power(pp1,2))*dxSignedSquareL((-Power(pp\
2/pp1,1 + 1/kappa) + Power(pp2/pp1,2/kappa))/Ndenom,eps)*onPositive(pp1 - \
pp2)*onPositive(-crit + pp2/pp1))/Ndenom))/Sqrt(Tp2));
          jacobianMatrix[1][6] = -((A0*Cd*Kg*pp2*((((-2*pp1*Power(pp1/pp2,-1 \
+ 2/kappa))/(kappa*Power(pp2,2)) + ((1 + \
1/kappa)*pp1*Power(pp1/pp2,1/kappa))/Power(pp2,2))*dxSignedSquareL((-Power(pp\
1/pp2,1 + 1/kappa) + Power(pp1/pp2,2/kappa))/Ndenom,eps)*onNegative(pp1 - \
pp2)*onPositive(-crit + pp1/pp2))/Ndenom + (((2*Power(pp2/pp1,-1 + \
2/kappa))/(kappa*pp1) - ((1 + \
1/kappa)*Power(pp2/pp1,1/kappa))/pp1)*dxSignedSquareL((-Power(pp2/pp1,1 + \
1/kappa) + Power(pp2/pp1,2/kappa))/Ndenom,eps)*onPositive(pp1 - \
pp2)*onPositive(-crit + pp2/pp1))/Ndenom))/Sqrt(Tp2)) - \
(A0*Cd*Kg*(onNegative(-crit + pp1/pp2)*onNegative(pp1 - pp2) + \
onNegative(-crit + pp2/pp1)*onPositive(pp1 - pp2) + onNegative(pp1 - \
pp2)*onPositive(-crit + pp1/pp2)*signedSquareL((-Power(pp1/pp2,1 + 1/kappa) + \
Power(pp1/pp2,2/kappa))/Ndenom,eps) + onPositive(pp1 - pp2)*onPositive(-crit \
+ pp2/pp1)*signedSquareL((-Power(pp2/pp1,1 + 1/kappa) + \
Power(pp2/pp1,2/kappa))/Ndenom,eps)))/Sqrt(Tp2);
          jacobianMatrix[2][0] = -onPositive(pp1 - pp2);
          jacobianMatrix[2][1] = onNegative(pp1 - pp2);
          jacobianMatrix[2][2] = 1;
          jacobianMatrix[2][3] = 0;
          jacobianMatrix[2][4] = 0;
          jacobianMatrix[2][5] = 0;
          jacobianMatrix[2][6] = 0;
          jacobianMatrix[3][0] = 0;
          jacobianMatrix[3][1] = 0;
          jacobianMatrix[3][2] = cp*(Tp1*onNegative(-qmp2) + \
Tp2*onPositive(-qmp2));
          jacobianMatrix[3][3] = 1;
          jacobianMatrix[3][4] = 0;
          jacobianMatrix[3][5] = 0;
          jacobianMatrix[3][6] = 0;
          jacobianMatrix[4][0] = 0;
          jacobianMatrix[4][1] = 0;
          jacobianMatrix[4][2] = -(cp*(Tp2*onNegative(qmp2) + \
Tp1*onPositive(qmp2)));
          jacobianMatrix[4][3] = 0;
          jacobianMatrix[4][4] = 1;
          jacobianMatrix[4][5] = 0;
          jacobianMatrix[4][6] = 0;
          jacobianMatrix[5][0] = 0;
          jacobianMatrix[5][1] = 0;
          jacobianMatrix[5][2] = 0;
          jacobianMatrix[5][3] = -Zcp1;
          jacobianMatrix[5][4] = 0;
          jacobianMatrix[5][5] = 1;
          jacobianMatrix[5][6] = 0;
          jacobianMatrix[6][0] = 0;
          jacobianMatrix[6][1] = 0;
          jacobianMatrix[6][2] = 0;
          jacobianMatrix[6][3] = 0;
          jacobianMatrix[6][4] = -Zcp2;
          jacobianMatrix[6][5] = 0;
          jacobianMatrix[6][6] = 1;
//==This code has been autogenerated using Compgen==

          //Solving equation using LU-faktorisation
          mpSolver->solve(jacobianMatrix, systemEquations, stateVark, iter);
          qma=stateVark[0];
          qmb=stateVark[1];
          qmp2=stateVark[2];
          dEp1=stateVark[3];
          dEp2=stateVark[4];
          pp1=stateVark[5];
          pp2=stateVark[6];
          //Expressions
          qmp1 = -qmp2;
        }

        //Calculate the delayed parts

        delayedPart[1][1] = delayParts1[1];
        delayedPart[2][1] = delayParts2[1];
        delayedPart[3][1] = delayParts3[1];
        delayedPart[4][1] = delayParts4[1];
        delayedPart[5][1] = delayParts5[1];
        delayedPart[6][1] = delayParts6[1];
        delayedPart[7][1] = delayParts7[1];

        //Write new values to nodes
        //Port Pp1
        (*mpND_pp1)=pp1;
        (*mpND_qmp1)=qmp1;
        (*mpND_dEp1)=dEp1;
        //Port Pp2
        (*mpND_pp2)=pp2;
        (*mpND_qmp2)=qmp2;
        (*mpND_dEp2)=dEp2;
        //outputVariables
        (*mpqma)=qma;
        (*mpqmb)=qmb;

        //Update the delayed variabels

     }
    void deconfigure()
    {
        delete mpSolver;
    }
};
#endif // PNEUMATICORIFICE_HPP_INCLUDED
